//leetcode 1.TwoSum
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int> hash;    //value->key   
        for(int i=0;i<nums.size();i++){
            int comp = target - nums[i]; 
            if(hash.count(comp)){
                return {hash[comp],i};
            }
            hash[nums[i]] = i;  //adds a new key or updates the val for key.
        }
        return {}; // No solution found
    }
};

//leetcode 203. Remove Linked List Elements
class Solution {
public:
    ListNode* removeElements(ListNode* head, int val) {      
        ListNode* dummy = new ListNode();
        ListNode* prev=dummy;
        ListNode* curr=head;  //handling edge case DO NOT FORGET.

        if(head == nullptr) return nullptr;
        
        while(curr!=nullptr){
            if(curr->val != val){
                prev=curr;
            }else{
                prev->next = curr->next;
            }
            curr=curr->next;
        }

        ListNode* newHead = dummy->next;
        delete dummy; 
        return newHead;
    }
};
