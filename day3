//leetCode 347.Top K Frequent Elements 
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> freq;
        for (int num : nums) {
            freq[num]++;
        }

        vector<pair<int,int>> freqVec;  //vector for sorting
        for (auto& [num, count] : freq) {
            freqVec.push_back({count, num});
        }
        sort(freqVec.rbegin(), freqVec.rend());
      
        vector<int> result;
        for (int i = 0; i < k; i++) {
            result.push_back(freqVec[i].second);
        }
        return result;
    }
};

//leetocde 226. Invert Binary Tree
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        if (root == nullptr) {
            return nullptr;
        }
        
        TreeNode* temp = root->left;
        root->left = root->right;
        root->right = temp;
        
        invertTree(root->left);
        invertTree(root->right);
        
        return root;        
    }
};
